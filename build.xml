<?xml version="1.0"?>
<project name="datafeeder" default="deploy" basedir=".">

	<!--
		Give user a chance to override without editing this file or typing -D
	-->
	<property file="${basedir}/build.properties" />

	<property file="build-${profile}.properties" />

	<!-- set global properties for this build -->
	<property name="project.name" value="datafeeder" />
	<property name="project.war" value="true" />
	<property name="richfaces.present" value="true" />
	<property name="dist.dir" value="dist" />
	<property name="src.dir" value="src/main" />
	<property name="src.test.dir" value="src/test" />
	<property name="lib.dir" value="lib" />
	<property name="endorsed.dir" value="${lib.dir}/endorsed" />
	<property name="war.dir" value="exploded-archives/${project.name}.war" />
	<property name="exploded.archive.dir" value="${war.dir}" />
	<property name="action.dir" value="WEB-INF/classes" />
	<property name="classes.web.dir" value="${war.dir}/WEB-INF/classes" />
	<property name="test.dir" value="test-build" />
	<property name="instrumented.dir" value="${test.dir}/instrumented" />
	<property name="bootstrap.dir" value="${basedir}/bootstrap" />
	<property name="jboss.domain" value="default" />
	<property name="deploy.dir" value="${jboss.home}/server/${jboss.domain}/deploy" />
	<property name="war.deploy.dir" value="${deploy.dir}/${project.name}.war" />
	<property name="packaged.archive" value="${dist.dir}/${project.name}.war" />
	<property name="testng.jar" value="${basedir}/lib/testng.jar" />
	<property name="javac.debug" value="true" />
	<property name="javac.deprecation" value="false" />
	<property name="debug" value="false" />

	<!--Properties for validating configuration files -->
	<property name="validate.resources.dir" value="${basedir}/exploded-archives" />
	<property name="schema.dir" value="${basedir}/exploded-archives/schemas" />
	<property name="src.schema.dir" value="${schema.dir}/org/jboss/seam" />
	<property name="schema.version" value="2.2" />
	<property name="cobertura.dir" value="${lib.dir}/cobertura"/>

	<fileset id="lib" dir="${lib.dir}">
		<include name="*.jar" />
	</fileset>

	<path id="build.classpath">
		<fileset refid="lib" />
	</path>

	<path id="cobertura.classpath">
		<fileset refid="lib" />
		<fileset dir="${cobertura.dir}">
			<include name="cobertura.jar"/>
			<include name="lib/**/*.jar"/>
		</fileset>
	</path>

	<taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>

	<target name="init" description="Initialize the build">

		<taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc"
			classpathref="build.classpath" /> <!-- really only the groovy jar is necessary -->

		<mkdir dir="${classes.web.dir}" />
		<mkdir dir="${dist.dir}" />

		<condition property="is.debug" value="true">
			<istrue value="${debug}" />
		</condition>
		<property name="transactionManagerLookupClass"
			value="org.hibernate.transaction.JBossTransactionManagerLookup" />
		<property name="ejbJndiPattern" value="${project.name}/#{ejbName}/local" />
		<condition property="seamBootstrapsPu" value="false" else="true">
			<available file="${jboss.home}/lib/jboss-vfs.jar" /> <!-- JBoss AS >= 5.0 -->
		</condition>
		<condition property="seamEmfRef" value="#{entityManagerFactory}"
			else="#{null}">
			<istrue value="${seamBootstrapsPu}" />
		</condition>
		<condition property="puJndiName" value="#{null}"
			else="java:comp/env/${project.name}/pu">
			<istrue value="${seamBootstrapsPu}" />
		</condition>

		<filterset id="persistence">
			<filter token="transactionManagerLookupClass" value="${transactionManagerLookupClass}" />
		</filterset>
		<filterset id="seam">
			<filter token="ejbJndiPattern" value="${ejbJndiPattern}" />
			<filter token="seamBootstrapsPu" value="${seamBootstrapsPu}" />
			<filter token="seamEmfRef" value="${seamEmfRef}" />
			<filter token="puJndiName" value="${puJndiName}" />
		</filterset>
		<filterset id="profile">
			<filter token="debug" value="${debug}" />
		</filterset>

		<!-- if a .groovy file is in model or action, set groovy.present -->
		<available property="groovy.present" value="true" file=""
			searchparents="true">
			<filepath>
				<fileset dir="${src.dir}">
					<include name="**/*.groovy" />
				</fileset>
			</filepath>
		</available>
		<condition property="groovy.test.present" value="true">
			<or>
				<isset property="groovy.present" />
				<available file="" searchparents="true">
					<filepath>
						<fileset dir="${src.test.dir}">
							<include name="**/*.groovy" />
						</fileset>
					</filepath>
				</available>
			</or>
		</condition>
		<condition property="groovy.dynamic" value="true">
			<and>
				<isset property="groovy.present" />
				<isset property="is.debug" />
			</and>
		</condition>
		<condition property="groovy.static" value="true">
			<and>
				<isset property="groovy.present" />
				<not>
					<isset property="is.debug" />
				</not>
			</and>
		</condition>
	</target>

	<target name="compilesrc" depends="init,groovy.compilesrc,groovy.copysrc"
		description="Compile the Java source code" unless="eclipse.running">
		<javac classpathref="build.classpath" destdir="${classes.web.dir}"
			debug="${javac.debug}" deprecation="${javac.deprecation}" nowarn="on">
			<src path="${src.dir}" />
		</javac>
	</target>

	<target name="groovy.compilesrc" if="groovy.static">
		<path id="groovy.action.classpath">
			<path refid="build.classpath" />
			<dirset dir="${classes.web.dir}" />
		</path>
		<groovyc classpathref="groovy.action.classpath" destdir="${classes.web.dir}"
			srcdir="${src.dir}">
		</groovyc>
	</target>

	<target name="groovy.copysrc" if="groovy.dynamic">
		<!-- copy the action groovy files into action if not compiled -->
		<copy todir="${classes.web.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.groovy" />
			</fileset>
		</copy>
	</target>

	<target name="copyclasses" depends="init,groovy.copysrc"
		description="Copy the classes that were compiled by eclipse" if="eclipse.running">
		<!--
			TODO check how the groovy eclipse plugin works, does it compile?
		-->
		<copy todir="${classes.web.dir}">
			<fileset dir="classes/main">
				<include name="**/*.class" />
			</fileset>
		</copy>
	</target>

	<target name="compile" depends="compilesrc,copyclasses"
		description="Compile the various source paths" />

	<target name="war" depends="compile"
		description="Build the WAR structure in a staging directory">

		<copy todir="${war.dir}">
			<fileset dir="${basedir}/view" />
		</copy>

		<copy tofile="${war.dir}/WEB-INF/classes/components.properties"
			file="${basedir}/resources/components-${profile}.properties">
			<filterset refid="seam" />
			<filterset refid="profile" />
		</copy>

		<copy tofile="${war.dir}/WEB-INF/classes/META-INF/persistence.xml"
			file="${basedir}/resources/META-INF/persistence-${profile}.xml">
			<filterset refid="persistence" />
		</copy>

		<copy tofile="${war.dir}/WEB-INF/classes/import.sql" file="${basedir}/resources/import-${profile}.sql" />

		<copy todir="${war.dir}/WEB-INF">
			<fileset dir="${basedir}/resources/WEB-INF">
				<include name="*.*" />
				<include name="lib/*.*" />
				<exclude name="web.xml" />
			</fileset>
		</copy>

		<copy todir="${war.dir}/WEB-INF/lib">
			<fileset dir="${lib.dir}">
				<includesfile name="deployed-jars.list" />
				<exclude name="jboss-seam-gen.jar" />
				<exclude name="jboss-seam-debug.jar" unless="is.debug" />
				<exclude name="icefaces-ahs.jar" if="icefaces.present" />
				<include name="groovy-*.jar" if="groovy.present" />
			</fileset>
		</copy>

		<copy todir="${war.dir}/WEB-INF/classes">
			<fileset dir="${src.dir}">
				<include name="**/*.component.xml" />
			</fileset>
			<fileset dir="${basedir}/resources">
				<include name="messages*.properties" />
				<include name="*_theme.properties" />
				<include name="seam.properties" />
				<include name="*.drl" />
				<include name="META-INF/*.drl" />
				<include name="*jpdl.xml" />
				<include name="*hibernate.cfg.xml" />
				<include name="jbpm.cfg.xml" />
				<include name="META-INF/orm.xml" />
				<include name="*.skin.properties" if="richfaces.present" />
				<include name="**/*.xcss" if="richfaces.present" />
			</fileset>
			<!--
				move XCSS into classpath for now loading from web context only works
				in JBoss AS 4
			-->
			<fileset dir="${basedir}/view">
				<include name="**/*.xcss" if="richfaces.present" />
			</fileset>
		</copy>

		<copy todir="${war.dir}/WEB-INF" file="${basedir}/resources/WEB-INF/web.xml">
			<filterset refid="profile" />
		</copy>

	</target>

	<target name="clear-profile-artifacts" depends="init"
		description="Clear compiled cache of profile-specific artifacts in anticipation of a profile change">
		<delete file="${war.dir}/WEB-INF/classes/META-INF/persistence.xml" />
		<delete file="${war.dir}/WEB-INF/classes/import.sql" />
		<delete file="${war.dir}/WEB-INF/classes/components.properties" />
	</target>

	<target name="stage" depends="war" />

	<target name="archive" depends="clear-profile-artifacts,stage"
		description="Package the WAR archive">
		<jar jarfile="${dist.dir}/${project.name}.war" basedir="${war.dir}" />
	</target>

	<target name="datasource">
		<fail unless="jboss.home">jboss.home not set</fail>
		<copy file="${basedir}/resources/${project.name}-${profile}-ds.xml"
			tofile="${deploy.dir}/${project.name}-ds.xml" />
	</target>

	<target name="explode" depends="stage,datasource" description="Deploy the exploded archive">
		<fail unless="jboss.home">jboss.home not set</fail>

		<mkdir dir="${war.deploy.dir}" />
		<copy todir="${war.deploy.dir}">
			<fileset dir="${war.dir}" />
		</copy>
	</target>

	<target name="unexplode" description="Undeploy the exploded archive">
		<delete failonerror="no">
			<fileset dir="${war.deploy.dir}">
				<exclude name="**/*.jar" />
			</fileset>
		</delete>
		<delete file="${deploy.dir}/${project.name}-ds.xml"
			failonerror="no" />
		<delete dir="${war.deploy.dir}" failonerror="no" />
	</target>

	<target name="reexplode" depends="unexplode,clean,explode"
		description="Undeploy the exploded archive, clean, then deploy the exploded archive" />

	<target name="check-deployed"
		description="Check to see if packaged archive is currently deployed">
		<fail unless="jboss.home">jboss.home not set</fail>
		<condition property="archive.deployed" value="true">
			<available file="${war.deploy.dir}" type="file" />
		</condition>
	</target>

	<target name="restart-exploded" unless="archive.deployed"
		description="Deploy exploded archive if not deployed as packaged archive">
		<antcall target="explode" />
		<touch file="${war.deploy.dir}/WEB-INF/web.xml" />
	</target>

	<target name="restart-deployed" if="archive.deployed"
		description="Deploy packaged archive if deployed as packaged archive">
		<antcall target="deploy" />
	</target>

	<target name="restart"
		depends="check-deployed,clear-profile-artifacts,restart-exploded,restart-deployed"
		description="Restart the exploded archive" />

	<target name="deploy" depends="archive,datasource" description="Deploy the packaged archive">
		<fail unless="jboss.home">jboss.home not set</fail>
		<copy todir="${deploy.dir}" file="${dist.dir}/${project.name}.war" />
	</target>

	<target name="undeploy" description="Undeploy the packaged archive">
		<delete file="${deploy.dir}/${project.name}.war" />
		<delete file="${deploy.dir}/${project.name}-ds.xml" />
	</target>

	<target name="redeploy" depends="undeploy,clean,deploy"
		description="Undeploy the packaged archive, clean, then deploy the packaged archive" />

	<target name="clean-test" description="Clean out the test results">
		<delete dir="${basedir}/test-report" />
		<delete dir="${basedir}/test-output" />
		<delete failonerror="no" includeemptydirs="true">
			<fileset dir="${bootstrap.dir}/data/hypersonic">
				<include name="**/*"/>
			</fileset>
		</delete>
		<delete failonerror="no" includeemptydirs="true">
			<fileset dir="${test.dir}">
				<exclude name="**/*.class" if="eclipse.running" />
			</fileset>
		</delete>
	</target>

	<target name="clean" depends="clean-test" description="Clean out the staging directory">
		<delete dir="${dist.dir}" />
		<delete dir="${basedir}/exploded-archives" />
	</target>

	<target name="compiletest" depends="groovy.compiletest" unless="eclipse.running"
		description="Compile the Java source code for the tests">
		<mkdir dir="${test.dir}" />
		<delete file="${test.dir}/cobertura.ser"/>
		<javac classpathref="build.classpath" destdir="${test.dir}"
			debug="${javac.debug}" deprecation="${javac.deprecation}" nowarn="on">
			<src path="${src.dir}" />
			<src path="${src.test.dir}" />
		</javac>
		<cobertura-instrument todir="${instrumented.dir}" datafile="${test.dir}/cobertura.ser">
			<fileset dir="${test.dir}">
				<include name="**/*.class"/>
				<exclude name="**/*Test.class"/>
				<exclude name="**/*Test$*.class"/>
				<exclude name="**/TestConstants.class"/>
				<exclude name="**/TestUtilities.class"/>
			</fileset>
<!--
			<includeClasses regex=".*"/>
			<excludeClasses regex=".*\.Test.*"/>
			<instrumentationClasspath>
				<path refid="build.classpath"/>
				<pathelement location="${test.dir}"/>
			</instrumentationClasspath>
-->
		</cobertura-instrument>
	</target>

	<target name="groovy.compiletest" if="groovy.test.present"
		description="Compile the Groovy source code for the tests">
		<mkdir dir="${test.dir}" />
		<groovyc classpathref="build.classpath" destdir="${test.dir}">
			<src path="${src.dir}" />
			<src path="${src.test.dir}" />
		</groovyc>
	</target>

	<target name="copytestclasses" if="eclipse.running"
		description="Copy classes compiled by eclipse to the test dir">
		<mkdir dir="${test.dir}" />
		<copy todir="${test.dir}">
			<fileset dir="classes/main">
				<include name="**/*.class" />
			</fileset>
		</copy>
		<copy todir="${test.dir}">
			<fileset dir="classes/test">
				<include name="**/*.class" />
				<exclude name="**/*Test.class" />
			</fileset>
		</copy>
	</target>

	<target name="buildtest" depends="init,compiletest,copytestclasses"
		description="Build the tests">
		<copy todir="${instrumented.dir}">
			<fileset dir="${basedir}/resources">
				<exclude name="META-INF/persistence*.xml" />
				<exclude name="import*.sql" />
				<exclude name="${project.name}-*-ds.xml" />
				<exclude name="components-*.properties" />
			</fileset>
			<fileset dir="${basedir}/view" />
		</copy>
		<copy tofile="${instrumented.dir}/META-INF/persistence.xml" file="${basedir}/resources/META-INF/persistence-test.xml" />
		<copy tofile="${instrumented.dir}/import.sql" file="${basedir}/resources/import-test.sql" />
		<copy tofile="${instrumented.dir}/components.properties" file="${basedir}/resources/components-test.properties" />
		<copy todir="${instrumented.dir}" flatten="true">
			<fileset dir="${src.test.dir}">
				<include name="**/*Test.xml" />
			</fileset>
		</copy>
	</target>

	<target name="test" depends="buildtest" description="Run the tests">
		<fail message="Cannot run tests because path to project contains spaces.">
			<condition>
				<contains string="${basedir}" substring=" " />
			</condition>
		</fail>
		<condition property="incompatible.jdk" value="true">
			<and>
				<equals arg1="${ant.java.version}" arg2="1.6" />
				<not>
					<available classname="javax.xml.bind.JAXB" />
				</not>
			</and>
		</condition>
		<fail if="incompatible.jdk">You are using an incompatible JDK 6. Please use Sun JDK
			6 Update 4 (1.6.0_04) or newer or use Open JDK 6.</fail>
		<taskdef resource="testngtasks" classpath="${testng.jar}" />
		<path id="test.path">
			<path path="${instrumented.dir}" />

			<path path="${test.dir}" />

			<fileset dir="${lib.dir}/test">
				<include name="*.jar" />
				<exclude name="*thirdparty*.jar"/>
			</fileset>
			<path path="${bootstrap.dir}" />
			<path refid="cobertura.classpath" />
			<!--<path refid="build.classpath" />-->
		</path>
		<testng outputdir="${basedir}/test-report">
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${test.dir}/cobertura.ser"/>
			<jvmarg line="-Dsun.lang.ClassLoader.allowArraySyntax=true" />
			<classpath refid="test.path" />
			<xmlfileset dir="${instrumented.dir}" includes="*Test.xml" />
		</testng>

		<cobertura-report format="html" destdir="${basedir}/test-report/cobertura" datafile="${test.dir}/cobertura.ser"
			srcdir="${src.dir}"/>
	</target>

	<target name="javadoc" depends="compile">
		<mkdir dir="${dist.dir}/apidoc" />
		<javadoc classpathref="build.classpath" destdir="${dist.dir}/apidoc"
			use="true" protected="true" version="true"
			windowtitle="${project.name} API Documentation" doctitle="${project.name} API Documentation"
			link="http://java.sun.com/j2se/5.0/docs/api">

			<packageset dir="${src.dir}" defaultexcludes="yes">
				<include name="*/**" />
			</packageset>

		</javadoc>
	</target>

	<target name="validate" depends="stage"
		description="Validate the XML configuration files">
		<mkdir dir="${schema.dir}" />
		<unjar src="${lib.dir}/jboss-seam.jar" dest="${schema.dir}">
			<patternset>
				<include name="org/jboss/seam/*.xsd" />
				<include name="org/jboss/seam/*.dtd" />
			</patternset>
		</unjar>
		<ant antfile="validate.xml" target="validateConfiguration" />
	</target>

	<target name="purge" depends="undeploy"
		description="Clean out JBoss AS temporary deployment files">
		<delete dir="${jboss.home}/server/default/tmp/deploy" />
		<mkdir dir="${jboss.home}/server/default/tmp/deploy/" />
		<delete dir="${jboss.home}/server/default/tmp/sessions" />
		<mkdir dir="${jboss.home}/server/default/tmp/sessions" />
		<delete
			dir="${jboss.home}/server/default/work/jboss.web/localhost/${project.name}" />
	</target>

</project>
